sampler2D dudvMap : register(s0);
sampler2D normalMap : register(s1);
samplerCUBE reflectionMap : register(s2);

float move : register(c4);

struct PSInput
{
    float2 NormalCoord : TEXCOORD0;
    float4 Position : TEXCOORD4;
    float3 TangentSpaceVDir : TEXCOORD5;
    float3 TangentSpaceLDir : TEXCOORD6;
};

struct PSOutput
{
    float4 Color : COLOR;
};

PSOutput main(PSInput ip)
{
	const float kShine = 128.0;
	const float kDistortion = 0.015;
	const float kRefraction = 0.029;

    PSOutput o;
	
	float2 refrCoords = ip.NormalCoord - move;
	float2 distOffset = (float2)tex2D(dudvMap, ip.NormalCoord) * kDistortion;
	float4 dudvColor = tex2D(dudvMap, refrCoords + distOffset);
	dudvColor = normalize(dudvColor * 2.0 - 1.0) * kRefraction;

	float3 normalVector = (float3)tex2D(normalMap, refrCoords + distOffset);
	normalVector = normalVector * 2.0 - 1.0;
	
	float3 lightReflection = reflect(ip.TangentSpaceLDir, normalVector) ;
	float specular = pow(max(0, dot(lightReflection, ip.TangentSpaceVDir)), 25);


	
	float3 refCoord = reflect(ip.TangentSpaceVDir,0.67 * float3(0,0,1) + 0.33 * normalVector);
	float tmp = refCoord.y;
	refCoord.y = refCoord.z;
	refCoord.z = tmp;
	float4 reflectionColor  = texCUBE(reflectionMap, refCoord);
	
	float fn = dot(normalize(ip.TangentSpaceVDir), float3(0, 0, 1));
	fn = 1.0 - saturate(fn/0.779);
    
	float ndl = max(0, dot(normalVector, ip.TangentSpaceLDir));
	
	float lum = dot(reflectionColor.xyz, float3(0.3, 0.59, 0.11))-0.3;
	if (lum<0)lum =0;
	//lum/=0.7;
	
    o.Color = lerp(ndl * float4(0, 0.211, 0.341, 0.5 * ndl + specular), float4(reflectionColor.xyz, specular+lum), fn) + specular;
    return o;
}
