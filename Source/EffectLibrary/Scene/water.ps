#include "hatching.psh"
#include "ShadowMapping.psh"

sampler2D dudvMap : register(s0);
sampler2D normalMap : register(s1);
samplerCUBE reflectionMap : register(s2);
sampler2D texShd : register(s3);

float move : register(c0);

struct PSInput
{
    float2 NormalCoord : TEXCOORD0;
	float4 smLgtPos : TEXCOORD1;
    float4 Position : TEXCOORD4;
    float3 TangentSpaceVDir : TEXCOORD5;
    float3 TangentSpaceLDir : TEXCOORD6;
};

struct PSOutput
{
    float4 Color : COLOR;
};

PSOutput main(PSInput ip)
{
	const float kShine = 128.0;
	const float kDistortion = 0.015;
	const float kRefraction = 0.029;

    PSOutput o;
	
	float2 refrCoords = ip.NormalCoord - move;
	float2 distOffset = (float2)tex2D(dudvMap, ip.NormalCoord) * kDistortion;
	float4 dudvColor = tex2D(dudvMap, refrCoords + distOffset);
	dudvColor = normalize(dudvColor * 2.0 - 1.0) * kRefraction;

	float3 normalVector = (float3)tex2D(normalMap, refrCoords + distOffset);
	normalVector = normalVector * 2.0 - 1.0;
	
	float3 lightReflection = reflect(ip.TangentSpaceLDir, normalVector) ;
	float specular = pow(max(0, dot(lightReflection, ip.TangentSpaceVDir)), 10);

 
	
	float3 refCoord = reflect(ip.TangentSpaceVDir,0.75 * float3(0,0,1) + 0.25 * normalVector);
	float tmp = refCoord.y;
	refCoord.y = refCoord.z;
	refCoord.z = tmp;
	float4 reflectionColor = texCUBE(reflectionMap, refCoord) + float4(0.25,0.5,0.25,0);
	reflectionColor *= float4(0.75,1,0.75,1);
	
	float fn = dot(normalize(ip.TangentSpaceVDir), float3(0, 0, 1));
	fn = 1.0 - saturate(fn/0.0779);
    
	float ndl = max(0, dot(normalVector, ip.TangentSpaceLDir));
	
	float lum = dot(reflectionColor.xyz, float3(0.3, 0.59, 0.11))-0.35;
	if (lum<0)lum =0;
	
	
    o.Color = lerp(ndl * float4(0, 0.205, 0.35, 0.7 * ndl + specular), float4(reflectionColor.xyz, specular+lum), fn) + specular;
    o.Color = o.Color * 0.001 +  float4(91/255.0,   225/255.0,   228/255.0, 1);
    
    o.Color.rgb *=ndl ;
    
    
    float2 ShadowTexC = ((ip.smLgtPos.xy + 0.33 * normalVector.xy) / ip.smLgtPos.w) * 0.5 + float2( 0.5, 0.5 );
    ShadowTexC.y = 1.0f - ShadowTexC.y;
    
    
    
	float shd = VSM_FILTER(texShd, ShadowTexC, ip.smLgtPos.z);
	o.Color.rgb *= 0.7 + 0.3 * shd;
	
  
    float2 hatchTexCoord = (refrCoords + distOffset) * 0.5;
    tmp = hatchTexCoord.x;
    hatchTexCoord.x= hatchTexCoord.y;
    hatchTexCoord.y = tmp;
	float3 hatchColor = computeHatchColor(ndl * shd, hatchTexCoord);
    o.Color.rgb *= hatchColor;
	
    return o;
}
